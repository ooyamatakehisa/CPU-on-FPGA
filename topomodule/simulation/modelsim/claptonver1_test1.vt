// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/26/2019 14:20:33"
                                                                                
// Verilog Test Bench template for design : claptonver1
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module claptonver1_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clkin;
reg reset;
// wires
wire haltW;
wire [15:0]  instrF;
wire memwrite;
wire [15:0] externalinput;
wire inM;
wire outW;
wire selecter1;
wire [15:0]  pc;
wire [15:0]  readdataM;
wire [15:0]  regdminM;
wire [15:0]  srcaex;
wire [15:0]  srcbex;
wire [15:0]  writedataM;
wire stallF;
wire pcsrcD;
wire memtoregE;
wire [15:0] instrD;
wire [2:0] rsD;
wire [2:0] rdD;
wire [2:0] writeregE;
wire [15:0] srcbD;
wire [15:0] resultW;
wire [31:0] cycle;

// assign statements (if any)                          
claptonver1 i1 (
// port map - connection between master ports and signals/registers   
 	.clkin(clkin),
	.haltW(haltW),
	.instrF(instrF),
	.externalinput(externalinput),
	.inM(inM),
	.outW(outW),
	.selecter1(selecter1),
	.memwrite(memwrite),
	.pc(pc),
	.readdataM(readdataM),
	.regdminM(regdminM),
	.reset(reset),
	.srcaex(srcaex),
	.srcbex(srcbex),
	.writedataM(writedataM),
	.stallF(stallF),
	.pcsrcD(pcsrcD),
	.memtoregE(memtoregE),
	.instrD(instrD),
	.rsD(rsD),
	.rdD(rdD),
	.writeregE(writeregE),
	.srcbD(srcbD),
	.resultW(resultW),
	.cycle(cycle)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin

reset<=0;
clkin<=0;
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          

#1000
clkin<=1;
reset<=1;

#1000
clkin<=0;
reset<=0;

@eachvec;                                              
// --> end                                             
end
always begin
#100
clkin<=~clkin;
end
endmodule
